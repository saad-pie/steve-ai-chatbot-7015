document.addEventListener('DOMContentLoaded', () => {const chatMessages = document.getElementById('chat-messages');const messageInput = document.getElementById('message-input');const sendButton = document.getElementById('send-button');const themeToggle = document.getElementById('theme-toggle');const clearChatButton = document.getElementById('clear-chat');const userMessageTemplate = document.getElementById('user-message-template');const botMessageTemplate = document.getElementById('bot-message-template');const typingIndicatorTemplate = document.getElementById('typing-indicator-template');let chatHistory = [];const API_URL = 'https://api.a4f.co'; const AI_MODEL_CHAT = 'provider-3/gpt-5-nano';// TODO: Replace with your actual A4F API Key or load securely.const A4F_API_KEY = 'YOUR_A4F_API_KEY_HERE'; // Placeholder, replace with your key!function sanitizeInput(text) {const div = document.createElement('div');div.appendChild(document.createTextNode(text));return div.innerHTML;}function parseMarkdown(text) {text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');     text = text.replace(/`(.*?)`/g, '<code>$1</code>');       text = text.replace(/```(\w*)\n([\s\S]*?)\n```/g, '<pre><code class="language-$1">$2</code></pre>'); return text;}function scrollChatToBottom() {chatMessages.scrollTop = chatMessages.scrollHeight;}function autoResizeTextarea() {messageInput.style.height = 'auto';messageInput.style.height = messageInput.scrollHeight + 'px';}function copyToClipboard(text) {navigator.clipboard.writeText(text).then(() => {alert('Message copied to clipboard!');}).catch(err => {console.error('Failed to copy: ', err);});}function readAloud(text) {if ('speechSynthesis' in window) {const utterance = new SpeechSynthesisUtterance(text);utterance.lang = 'en-US';window.speechSynthesis.speak(utterance);} else {alert('Text-to-speech not supported in your browser.');}}function addMessageToChat(role, content) {const template = role === 'user' ? userMessageTemplate : botMessageTemplate;const messageElement = template.content.cloneNode(true);const messageText = messageElement.querySelector('.message-text');messageText.innerHTML = role === 'bot' ? parseMarkdown(content) : sanitizeInput(content);if (role === 'user') {const resendButton = messageElement.querySelector('.resend-button');resendButton.onclick = () => {messageInput.value = content;autoResizeTextarea();messageInput.focus();};const copyButton = messageElement.querySelector('.copy-button');copyButton.onclick = () => copyToClipboard(content); } else { const copyButton = messageElement.querySelector('.copy-button');copyButton.onclick = () => copyToClipboard(content);const speakButton = messageElement.querySelector('.speak-button');speakButton.onclick = () => readAloud(content);}chatMessages.appendChild(messageElement);scrollChatToBottom();}function showTypingIndicator() {const typingIndicator = typingIndicatorTemplate.content.cloneNode(true);typingIndicator.id = 'typing-indicator';chatMessages.appendChild(typingIndicator);scrollChatToBottom();}function removeTypingIndicator() {const indicator = document.getElementById('typing-indicator');if (indicator) {indicator.remove();}}async function getBotResponse(userMessage) {if (A4F_API_KEY === 'YOUR_A4F_API_KEY_HERE' || !A4F_API_KEY) {addMessageToChat('bot', 'Error: A4F API Key is missing. Please set it in script.js.');removeTypingIndicator();return;}showTypingIndicator();try {const messages = chatHistory.map(msg => ({role: msg.role === 'user' ? 'user' : 'assistant',content: msg.content}));messages.push({ role: 'user', content: userMessage });const response = await fetch(`${API_URL}/chat`, {method: 'POST',headers: {'Content-Type': 'application/json','Authorization': `Bearer ${A4F_API_KEY}`},body: JSON.stringify({model: AI_MODEL_CHAT,messages: messages,max_tokens: 500,temperature: 0.7,})});if (!response.ok) {const errorData = await response.json();throw new Error(`A4F API Error: ${response.status} - ${errorData.message || JSON.stringify(errorData)}`);}const data = await response.json();let botResponseText = 'No response from AI.';if (data.choices && data.choices.length > 0 && data.choices[0].message) {botResponseText = data.choices[0].message.content;} else {botResponseText = 'Unexpected API response format.';console.warn('Unexpected API response format:', data);}removeTypingIndicator();addMessageToChat('bot', botResponseText);chatHistory.push({ role: 'bot', content: botResponseText });localStorage.setItem('chatHistory', JSON.stringify(chatHistory));} catch (error) {console.error('Error fetching bot response:', error);removeTypingIndicator();addMessageToChat('bot', `Error: ${error.message}`);}}async function handleSend() {const userMessage = messageInput.value.trim();if (!userMessage) return;addMessageToChat('user', userMessage);chatHistory.push({ role: 'user', content: userMessage });localStorage.setItem('chatHistory', JSON.stringify(chatHistory));messageInput.value = '';autoResizeTextarea();await getBotResponse(userMessage);}function updateTheme() {const isDark = document.body.classList.toggle('dark-theme');localStorage.setItem('theme', isDark ? 'dark' : 'light');themeToggle.innerHTML = isDark ? '&#9728;' : '&#9788;';} // Initial theme setup and event listeners// Load theme on startup and set button iconif (localStorage.getItem('theme') === 'dark') {document.body.classList.add('dark-theme');themeToggle.innerHTML = '&#9728;';} else {document.body.classList.remove('dark-theme');themeToggle.innerHTML = '&#9788;';}// Initial load of chat history (if any, otherwise prompt user)const storedChatHistory = localStorage.getItem('chatHistory');if (storedChatHistory) {chatHistory = JSON.parse(storedChatHistory);chatHistory.forEach(msg => {addMessageToChat(msg.role, msg.content);});} else {addMessageToChat('bot', 'Hello there! How can I assist you today?');}// Attach event listenerssendButton.addEventListener('click', handleSend);messageInput.addEventListener('keypress', (e) => {if (e.key === 'Enter' && !e.shiftKey) {e.preventDefault();handleSend();}});messageInput.addEventListener('input', autoResizeTextarea);themeToggle.addEventListener('click', updateTheme);clearChatButton.addEventListener('click', () => {chatMessages.innerHTML = '';chatHistory = [];localStorage.removeItem('chatHistory');addMessageToChat('bot', 'Chat cleared! How can I help you now?');});scrollChatToBottom();});