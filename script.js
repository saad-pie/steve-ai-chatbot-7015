document.addEventListener('DOMContentLoaded', () => {const chatMessages = document.getElementById('chat-messages');const messageInput = document.getElementById('message-input');const sendButton = document.getElementById('send-button');const themeToggle = document.getElementById('theme-toggle');const clearChatButton = document.getElementById('clear-chat');const userMessageTemplate = document.getElementById('user-message-template');const botMessageTemplate = document.getElementById('bot-message-template');const typingIndicatorTemplate = document.getElementById('typing-indicator-template');let chatHistory = [];const API_URL = 'https://api.a4f.co'; const AI_MODEL_CHAT = 'provider-3/gpt-5-nano';const AI_MODEL_SUMMARY = 'provider-3/gpt-4';function sanitizeInput(text) {const div = document.createElement('div');div.appendChild(document.createTextNode(text));return div.innerHTML;}function parseMarkdown(text) {text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');     text = text.replace(/`(.*?)`/g, '<code>$1</code>');       text = text.replace(/```(\w*)\n([\s\S]*?)\n```/g, '<pre><code class="language-$1">$2</code></pre>'); return text;}function scrollChatToBottom() {chatMessages.scrollTop = chatMessages.scrollHeight;}function autoResizeTextarea() {messageInput.style.height = 'auto';messageInput.style.height = messageInput.scrollHeight + 'px';}function copyToClipboard(text) {navigator.clipboard.writeText(text).then(() => {alert('Message copied to clipboard!');}).catch(err => {console.error('Failed to copy: ', err);});}function readAloud(text) {if ('speechSynthesis' in window) {const utterance = new SpeechSynthesisUtterance(text);utterance.lang = 'en-US';window.speechSynthesis.speak(utterance);} else {alert('Text-to-speech not supported in your browser.');}}function addMessageToChat(role, content, originalContent = '') {const template = role === 'user' ? userMessageTemplate : botMessageTemplate;const messageElement = template.content.cloneNode(true);const messageText = messageElement.querySelector('.message-text');messageText.innerHTML = role === 'bot' ? parseMarkdown(content) : sanitizeInput(content);if (role === 'user') {const resendButton = messageElement.querySelector('.resend-button');resendButton.onclick = () => {messageInput.value = originalContent;autoResizeTextarea();messageInput.focus();};const copyButton = messageElement.querySelector('.copy-button');copyButton.onclick = () => copyToClipboard(originalContent || content); } else { const copyButton = messageElement.querySelector('.copy-button');copyButton.onclick = () => copyToClipboard(content);const speakButton = messageElement.querySelector('.speak-button');speakButton.onclick = () => readAloud(content);}chatMessages.appendChild(messageElement);scrollChatToBottom();}function showTypingIndicator() {const typingIndicator = typingIndicatorTemplate.content.cloneNode(true);typingIndicator.id = 'typing-indicator';chatMessages.appendChild(typingIndicator);scrollChatToBottom();}function removeTypingIndicator() {const indicator = document.getElementById('typing-indicator');if (indicator) {indicator.remove();}}async function getBotResponse(userMessage) {console.log('Sending message to mock AI:', userMessage);showTypingIndicator();await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000)); const mockResponses = [`Hello there! How can I assist you today?`, `I am SteveAI, an AI chatbot developed by saadpie. I can help with a variety of tasks.`, `Could you please elaborate on that? I'm here to provide concise answers.`, `This is a code example. You can **copy** it or I can *read* it aloud.`, `My core features include intelligent conversation management, robust AI integration with A4F.co, and a dynamic user interface with markdown rendering and typing animation.`, `The summarization task uses 
` + '```javascript
' + 'console.log(